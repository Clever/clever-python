# coding: utf-8

"""
    Clever API

    The Clever API

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Contact(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'district': 'str',
        'email': 'str',
        'id': 'str',
        'name': 'str',
        'phone': 'str',
        'phone_type': 'str',
        'relationship': 'str',
        'sis_id': 'str',
        'students': 'list[str]',
        'type': 'str'
    }

    attribute_map = {
        'district': 'district',
        'email': 'email',
        'id': 'id',
        'name': 'name',
        'phone': 'phone',
        'phone_type': 'phone_type',
        'relationship': 'relationship',
        'sis_id': 'sis_id',
        'students': 'students',
        'type': 'type'
    }

    def __init__(self, district=None, email=None, id=None, name=None, phone=None, phone_type=None, relationship=None, sis_id=None, students=None, type=None):
        """
        Contact - a model defined in Swagger
        """

        self._district = None
        self._email = None
        self._id = None
        self._name = None
        self._phone = None
        self._phone_type = None
        self._relationship = None
        self._sis_id = None
        self._students = None
        self._type = None
        self.discriminator = None

        if district is not None:
          self.district = district
        if email is not None:
          self.email = email
        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if phone is not None:
          self.phone = phone
        if phone_type is not None:
          self.phone_type = phone_type
        if relationship is not None:
          self.relationship = relationship
        if sis_id is not None:
          self.sis_id = sis_id
        if students is not None:
          self.students = students
        if type is not None:
          self.type = type

    @property
    def district(self):
        """
        Gets the district of this Contact.

        :return: The district of this Contact.
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """
        Sets the district of this Contact.

        :param district: The district of this Contact.
        :type: str
        """

        self._district = district

    @property
    def email(self):
        """
        Gets the email of this Contact.

        :return: The email of this Contact.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this Contact.

        :param email: The email of this Contact.
        :type: str
        """

        self._email = email

    @property
    def id(self):
        """
        Gets the id of this Contact.

        :return: The id of this Contact.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Contact.

        :param id: The id of this Contact.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Contact.

        :return: The name of this Contact.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Contact.

        :param name: The name of this Contact.
        :type: str
        """

        self._name = name

    @property
    def phone(self):
        """
        Gets the phone of this Contact.

        :return: The phone of this Contact.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """
        Sets the phone of this Contact.

        :param phone: The phone of this Contact.
        :type: str
        """

        self._phone = phone

    @property
    def phone_type(self):
        """
        Gets the phone_type of this Contact.

        :return: The phone_type of this Contact.
        :rtype: str
        """
        return self._phone_type

    @phone_type.setter
    def phone_type(self, phone_type):
        """
        Sets the phone_type of this Contact.

        :param phone_type: The phone_type of this Contact.
        :type: str
        """
        allowed_values = ["Cell", "Home", "Work", "Other", ""]
        if phone_type not in allowed_values:
            raise ValueError(
                "Invalid value for `phone_type` ({0}), must be one of {1}"
                .format(phone_type, allowed_values)
            )

        self._phone_type = phone_type

    @property
    def relationship(self):
        """
        Gets the relationship of this Contact.

        :return: The relationship of this Contact.
        :rtype: str
        """
        return self._relationship

    @relationship.setter
    def relationship(self, relationship):
        """
        Sets the relationship of this Contact.

        :param relationship: The relationship of this Contact.
        :type: str
        """
        allowed_values = ["Parent", "Grandparent", "Self", "Aunt/Uncle", "Sibling", "Other", ""]
        if relationship not in allowed_values:
            raise ValueError(
                "Invalid value for `relationship` ({0}), must be one of {1}"
                .format(relationship, allowed_values)
            )

        self._relationship = relationship

    @property
    def sis_id(self):
        """
        Gets the sis_id of this Contact.

        :return: The sis_id of this Contact.
        :rtype: str
        """
        return self._sis_id

    @sis_id.setter
    def sis_id(self, sis_id):
        """
        Sets the sis_id of this Contact.

        :param sis_id: The sis_id of this Contact.
        :type: str
        """

        self._sis_id = sis_id

    @property
    def students(self):
        """
        Gets the students of this Contact.

        :return: The students of this Contact.
        :rtype: list[str]
        """
        return self._students

    @students.setter
    def students(self, students):
        """
        Sets the students of this Contact.

        :param students: The students of this Contact.
        :type: list[str]
        """

        self._students = students

    @property
    def type(self):
        """
        Gets the type of this Contact.

        :return: The type of this Contact.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Contact.

        :param type: The type of this Contact.
        :type: str
        """
        allowed_values = ["Parent/Guardian", "Emergency", "Primary", "Secondary", "Family", "Other", ""]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Contact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
